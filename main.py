import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.figure_factory as ff
import seaborn as sns
import matplotlib.pyplot as plt
from io import BytesIO
import warnings
import io

warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –î–∞—à–±–æ—Ä–¥ –°—Ç—Ä–∞–Ω –ú–∏—Ä–∞",
    page_icon="üåç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main > div {
        padding-top: 2rem;
    }
    .stMetric {
        background-color: #f0f2f6;
        border: 1px solid #e6e9ef;
        padding: 1rem;
        border-radius: 0.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 20px;
        border-radius: 10px;
        color: white;
        margin: 10px 0;
    }
    .big-font {
        font-size: 2rem !important;
        font-weight: bold;
        color: #1f77b4;
    }
    .highlight {
        background-color: #ffeaa7;
        padding: 0.5rem;
        border-radius: 0.3rem;
        border-left: 4px solid #fdcb6e;
    }
</style>
""", unsafe_allow_html=True)


@st.cache_data
def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
    df = pd.read_csv(
        'world-data-2023.csv',
        thousands=',',
        decimal='.',
        encoding='utf-8'
    )

    # –û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫
    df.columns = df.columns.str.strip().str.replace('\n', ' ').str.replace('\r', '')

    # --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å–ø–∏—Å–∫—É —Ñ–∏—á–µ–π ---
    # –≠—Ç–æ—Ç –±–ª–æ–∫ –∫–æ–¥–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –≤ DataFrame
    # —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–º –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ —Ñ–∏—á–µ–π.
    df.rename(columns={
        'Agricultural Land( %)': 'Agricultural Land (%)',
        'Land Area(Km2)': 'Land Area (Km2)',
        'Armed Forces size': 'Armed Forces Size',
        'Gasoline Price': 'Gasoline Price',  # –û—Å—Ç–∞–≤–ª—è–µ–º 'Gasoline Price' –µ—Å–ª–∏ —ç—Ç–æ –∏–º—è –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        'Gross primary education enrollment (%)': 'Gross Primary Education Enrollment (%)',
        'Gross tertiary education enrollment (%)': 'Gross Tertiary Education Enrollment (%)',
        'Infant mortality': 'Infant Mortality',
        'Maternal mortality ratio': 'Maternal Mortality Ratio',
        'Minimum wage': 'Minimum Wage',
        'Out of pocket health expenditure': 'Out of pocket health expenditure',
        # –û—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ (%) –µ—Å–ª–∏ —ç—Ç–æ –∏–º—è –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        'Physicians per thousand': 'Physicians per thousand',
        'Population: Labor force participation (%)': 'Population: Labor force participation (%)',
        'Tax revenue (%)': 'Tax revenue (%)',
        'Unemployment rate': 'Unemployment rate',
        'Urban_population': 'Urban_population'  # –û—Å—Ç–∞–≤–ª—è–µ–º 'Urban_population' –µ—Å–ª–∏ —ç—Ç–æ –∏–º—è –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    }, inplace=True)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –≤ numeric_columns
    # –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è.
    # –í —ç—Ç–æ–º –º–µ—Å—Ç–µ –≤—ã –¥–æ–ª–∂–Ω—ã —Ä–µ—à–∏—Ç—å, –∫–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ —Ñ–∏—á–µ–π –∏–ª–∏ –∏–∑ numeric_columns)
    # —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º. –Ø –ø—Ä–∏–≤–µ–ª numeric_columns –∫ –≤–∞—à–µ–º—É —Å–ø–∏—Å–∫—É —Ñ–∏—á–µ–π.
    numeric_columns = [
        'Density (P/Km2)', 'Agricultural Land (%)', 'Land Area (Km2)',
        'Armed Forces Size', 'Birth Rate', 'Co2-Emissions', 'CPI',
        'CPI Change (%)', 'Fertility Rate', 'Forested Area (%)',
        'Gasoline Price',  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 'Gasoline_Price'
        'GDP', 'Gross Primary Education Enrollment (%)',
        'Gross Tertiary Education Enrollment (%)', 'Infant Mortality',
        'Life expectancy', 'Maternal Mortality Ratio', 'Minimum Wage',
        'Out of pocket health expenditure',  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 'Out of Pocket Health Expenditure (%)'
        'Physicians per thousand',  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 'Physicians per Thousand'
        'Population', 'Population: Labor force participation (%)',
        # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 'Population: Labor Force Participation (%)'
        'Tax revenue (%)',  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 'Tax Revenue (%)'
        'Total tax rate', 'Unemployment rate',  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 'Unemployment Rate'
        'Urban_population',  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 'Urban Population'
        'Latitude', 'Longitude'
    ]

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è 'Life expectancy' –∏ 'Co2-Emissions'
    df['Life expectancy'] = (
        df['Life expectancy']
        .astype(str)
        .str.replace(',', '.', regex=False)
        .replace('None', np.nan)
        .astype(float)
    )

    df['Land Area (Km2)'] = (
        df['Land Area (Km2)']
        .astype(str)
        .str.replace(',', '.', regex=False)
        .replace('None', np.nan)
        .astype(float)
    )

    # –û—á–∏—â–∞–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏–º –≤ —á–∏—Å–ª–∞
    for col in numeric_columns:
        if col in df.columns:
            df[col] = (
                df[col]
                .astype(str)
                .str.replace(r'[^0-9\.\-]', '', regex=True)
                .replace('', np.nan)
            )
            df[col] = pd.to_numeric(df[col], errors='coerce')
        else:
            st.warning(f"–ö–æ–ª–æ–Ω–∫–∞ '{col}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ DataFrame –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")

    # # ---- –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ø–æ—Ç–æ–º —É–±—Ä–∞—Ç—å ----
    # st.write("–ü—Ä–æ–ø—É—â–µ–Ω–æ –≤ Population:", df['Population'].isna().sum(), "–∏–∑", len(df))
    # st.write("–ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", df.columns.tolist())
    # # -----------------------------------------------

    return df


def safe_column_check(df, column_name):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏"""
    return column_name in df.columns and not df[column_name].isna().all()


def create_metric_cards(df, selected_countries):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –∫–ª—é—á–µ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
    try:
        filtered_df = df[df['Country'].isin(selected_countries)] if selected_countries else df

        col1, col2, col3, col4 = st.columns(4)

        with col1:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—É–º–º—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π NaN
            total_pop = filtered_df['Population'].fillna(0).sum() if 'Population' in filtered_df.columns else 0
            st.markdown("""
            <div class="metric-card">
                <h3>üë• –û–±—â–∞—è –ü–æ–ø—É–ª—è—Ü–∏—è</h3>
                <h2>{:,.0f}</h2>
                <p>—á–µ–ª–æ–≤–µ–∫</p>
            </div>
            """.format(total_pop), unsafe_allow_html=True)

        with col2:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π NaN
            if 'GDP' in filtered_df.columns and not filtered_df['GDP'].isna().all():
                avg_gdp = filtered_df['GDP'].dropna().mean()
            else:
                avg_gdp = 0
            st.markdown("""
            <div class="metric-card">
                <h3>üí∞ –°—Ä–µ–¥–Ω–∏–π –í–í–ü</h3>
                <h2>${:,.0f}</h2>
                <p>–º–∏–ª–ª–∏–∞—Ä–¥–æ–≤</p>
            </div>
            """.format(avg_gdp / 1e9 if avg_gdp > 0 else 0), unsafe_allow_html=True)

        with col3:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π NaN
            if 'Life expectancy' in filtered_df.columns and not filtered_df['Life expectancy'].isna().all():
                avg_life_exp = filtered_df['Life expectancy'].dropna().mean()
            else:
                avg_life_exp = 0
            st.markdown("""
            <div class="metric-card">
                <h3>üè• –°—Ä. –û–∂–∏–¥–∞–µ–º–æ—Å—Ç—å –ñ–∏–∑–Ω–∏</h3>
                <h2>{:.1f}</h2>
                <p>–ª–µ—Ç</p>
            </div>
            """.format(avg_life_exp), unsafe_allow_html=True)

        with col4:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π NaN
            if 'Land Area (Km2)' in filtered_df.columns and not filtered_df['Land Area (Km2)'].isna().all():
                avg_area = filtered_df['Land Area (Km2)'].dropna().mean()
            else:
                avg_area = 0

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π –ø–ª–æ—â–∞–¥–∏
            if avg_area >= 1e6:
                display_area = f"{avg_area / 1e6:.2f}M"
            elif avg_area >= 1e3:
                display_area = f"{avg_area / 1e3:.2f}K"
            else:
                display_area = f"{avg_area:.2f}"

            st.markdown(f"""
            <div class="metric-card">
                <h3>üåç –°—Ä. –ü–ª–æ—â–∞–¥—å –°—É—à–∏</h3>
                <h2>{display_area}</h2>
                <p>–∫–º¬≤</p>
            </div>
            """, unsafe_allow_html=True)

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –º–µ—Ç—Ä–∏–∫: {str(e)}")
        st.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö")


def create_correlation_heatmap(df, selected_countries):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π"""
    try:
        filtered_df = df[df['Country'].isin(selected_countries)] if selected_countries else df

        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –º–µ–Ω–µ–µ 3 —Å—Ç—Ä–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ø–æ –≤—Å–µ–º —Å—Ç—Ä–∞–Ω–∞–º
        if selected_countries and len(selected_countries) < 3:
            st.info(
                f"‚ÑπÔ∏è –î–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã (–≤—ã–±—Ä–∞–Ω–æ —Ç–æ–ª—å–∫–æ {len(selected_countries)} —Å—Ç—Ä–∞–Ω)")
            filtered_df = df

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        available_numeric_cols = []
        potential_cols = ['Population', 'GDP', 'Life expectancy', 'Birth Rate', 'Unemployment rate',
                          'Urban_population', 'Co2-Emissions', 'Physicians per thousand']

        for col in potential_cols:
            if safe_column_check(filtered_df, col):
                available_numeric_cols.append(col)

        if len(available_numeric_cols) < 2:
            st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã")
            return None

        corr_data = filtered_df[available_numeric_cols].corr()

        fig = px.imshow(
            corr_data,
            labels=dict(x="–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏", y="–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏", color="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è"),
            x=corr_data.columns,
            y=corr_data.columns,
            color_continuous_scale='RdBu_r',
            aspect="auto",
            title="üî• –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –º–µ–∂–¥—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏"
        )

        fig.update_layout(
            title_font=dict(size=20, color='#2c3e50'),
            height=600,
            font=dict(size=12)
        )

        return fig
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã: {str(e)}")
        return None


def create_gdp_vs_life_expectancy(df, selected_countries):
    """–°–æ–∑–¥–∞–Ω–∏–µ scatter plot –í–í–ü vs –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏"""
    try:
        if selected_countries and len(selected_countries) <= 2:
            filtered_df = df.copy()
            filtered_df['–í—ã–¥–µ–ª–µ–Ω–æ'] = filtered_df['Country'].apply(
                lambda x: '–í—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞' if x in selected_countries else '–î—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã'
            )
            title = f"üíé –í–í–ü vs –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏"
            color_col = '–í—ã–¥–µ–ª–µ–Ω–æ'
            color_map = {'–í—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞': 'red', '–î—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã': 'lightblue'}
        else:
            filtered_df = df[df['Country'].isin(selected_countries)] if selected_countries else df
            filtered_df['–í—ã–¥–µ–ª–µ–Ω–æ'] = '–í—Å–µ —Å—Ç—Ä–∞–Ω—ã'
            title = "üíé –í–í–ü vs –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏"
            color_col = 'Urban_population' if safe_column_check(filtered_df, 'Urban_population') else None
            color_map = None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_cols = ['GDP', 'Life expectancy', 'Population', 'Country']
        missing_cols = [col for col in required_cols if not safe_column_check(filtered_df, col)]

        if missing_cols:
            st.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫: {', '.join(missing_cols)}")
            return None

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN –≤ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
        filtered_df = filtered_df.dropna(subset=['GDP', 'Life expectancy', 'Population'])

        if filtered_df.empty:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
            return None

        hover_data = {}
        if safe_column_check(filtered_df, 'Birth Rate'):
            hover_data['Birth Rate'] = True
        if safe_column_check(filtered_df, 'Unemployment rate'):
            hover_data['Unemployment rate'] = True

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å –∫—Ä—É–≥–∞
        MIN_SIZE = 8
        MAX_SIZE = 60

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π NaN
        pop = filtered_df['Population'].astype(float)
        pop_min = pop.min()
        pop_max = pop.max()

        # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º NaN
        def scale_population(val):
            if pd.isna(val):
                return (MIN_SIZE + MAX_SIZE) / 2
            if pop_max == pop_min or pop_max == 0:
                return (MIN_SIZE + MAX_SIZE) / 2
            return MIN_SIZE + (val - pop_min) / (pop_max - pop_min) * (MAX_SIZE - MIN_SIZE)

        filtered_df['_BubbleSize'] = pop.apply(scale_population)

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN –≤ —Ä–∞–∑–º–µ—Ä–∞—Ö
        filtered_df['_BubbleSize'] = filtered_df['_BubbleSize'].fillna((MIN_SIZE + MAX_SIZE) / 2)

        fig = px.scatter(
            filtered_df,
            x='GDP',
            y='Life expectancy',
            size='_BubbleSize',
            color=color_col,
            hover_name='Country',
            hover_data=hover_data,
            title=title,
            labels={
                'GDP': '–í–í–ü (USD)',
                'Life expectancy': '–û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏ (–ª–µ—Ç)',
                'Population': '–ù–∞—Å–µ–ª–µ–Ω–∏–µ',
                'Urban_population': '–ì–æ—Ä–æ–¥—Å–∫–æ–µ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ (%)',
                '–í—ã–¥–µ–ª–µ–Ω–æ': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
            },
            color_continuous_scale='viridis' if not color_map else None,
            color_discrete_map=color_map
        )

        fig.update_layout(
            title_font=dict(size=20, color='#2c3e50'),
            height=600,
            showlegend=True
        )

        fig.update_traces(marker=dict(line=dict(width=1, color='white')))

        return fig
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ scatter plot: {str(e)}")
        return None


def create_population_pyramid(df, selected_countries):
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –Ω–∞—Å–µ–ª–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∞–º"""
    try:
        if selected_countries and len(selected_countries) == 1:
            # –î–ª—è –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ç–æ–ø-10 —Å—Ç—Ä–∞–Ω–∞–º–∏
            country_name = selected_countries[0]
            selected_country_data = df[df['Country'] == country_name]
            top_countries = df.nlargest(10, 'Population')

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã —Å —Ç–æ–ø-10
            if not selected_country_data.empty and country_name not in top_countries['Country'].values:
                display_df = pd.concat([top_countries, selected_country_data])
            else:
                display_df = top_countries

            title = f"üèôÔ∏è –ù–∞—Å–µ–ª–µ–Ω–∏–µ: {country_name} –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å –∫—Ä—É–ø–Ω–µ–π—à–∏–º–∏ —Å—Ç—Ä–∞–Ω–∞–º–∏"

            # –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω—É —Ü–≤–µ—Ç–æ–º
            colors = ['red' if country == country_name else 'lightblue' for country in display_df['Country']]

        else:
            if selected_countries:
                filtered_df = df[df['Country'].isin(selected_countries)]
            else:
                filtered_df = df.dropna(subset=['Population']).nlargest(15, 'Population')

            display_df = filtered_df.sort_values('Population', ascending=True)
            title = "üèôÔ∏è –ù–∞—Å–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º (–¢–æ–ø-15)"
            colors = 'Population'

        if not safe_column_check(display_df, 'Population'):
            st.warning("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞—Å–µ–ª–µ–Ω–∏–∏")
            return None

        fig = px.bar(
            display_df.sort_values('Population', ascending=True),
            x='Population',
            y='Country',
            orientation='h',
            title=title,
            labels={'Population': '–ù–∞—Å–µ–ª–µ–Ω–∏–µ', 'Country': '–°—Ç—Ä–∞–Ω–∞'},
            color=colors,
            color_continuous_scale='plasma' if colors == 'Population' else None,
            color_discrete_map={country: color for country, color in zip(display_df['Country'], colors)} if isinstance(
                colors, list) else None
        )

        fig.update_layout(
            title_font=dict(size=20, color='#2c3e50'),
            height=600,
            yaxis={'categoryorder': 'total ascending'}
        )

        return fig
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã –Ω–∞—Å–µ–ª–µ–Ω–∏—è: {str(e)}")
        return None


def create_multi_indicator_radar(df, selected_countries):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–¥–∞—Ä–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω"""
    if not selected_countries or len(selected_countries) < 2:
        st.warning("–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å—Ç—Ä–∞–Ω—ã –¥–ª—è —Ä–∞–¥–∞—Ä–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã")
        return None

    filtered_df = df[df['Country'].isin(selected_countries)]

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–¥–∞—Ä–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    indicators = ['Life expectancy', 'GDP', 'Urban_population', 'Physicians per thousand',
                  'Gross Primary Education Enrollment (%)', 'Tax revenue (%)']

    fig = go.Figure()

    for country in selected_countries[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 —Å—Ç—Ä–∞–Ω –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        country_data = filtered_df[filtered_df['Country'] == country]
        if not country_data.empty:
            values = []
            for indicator in indicators:
                val = country_data[indicator].iloc[0]
                # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫ —à–∫–∞–ª–µ 0-100
                if indicator == 'GDP':
                    val = min(val / 1e12 * 100, 100)
                elif indicator == 'Life expectancy':
                    val = val / 100 * 100
                values.append(val)

            fig.add_trace(go.Scatterpolar(
                r=values,
                theta=indicators,
                fill='toself',
                name=country,
                line=dict(width=2)
            ))

    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 100]
            )),
        showlegend=True,
        title="üéØ –ú–Ω–æ–≥–æ–º–µ—Ä–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω",
        title_font=dict(size=20, color='#2c3e50'),
        height=600
    )

    return fig


def create_economic_analysis(df, selected_countries):
    """–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"""
    filtered_df = df[df['Country'].isin(selected_countries)] if selected_countries else df

    fig = make_subplots(
        rows=2, cols=2,
        subplot_titles=('–í–í–ü –ø–æ —Å—Ç—Ä–∞–Ω–∞–º', '–£—Ä–æ–≤–µ–Ω—å –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã', '–ù–∞–ª–æ–≥–æ–≤—ã–µ –¥–æ—Ö–æ–¥—ã', 'CO2 —ç–º–∏—Å—Å–∏–∏'),
        specs=[[{"secondary_y": False}, {"secondary_y": False}],
               [{"secondary_y": False}, {"secondary_y": False}]]
    )

    top_countries = filtered_df.nlargest(10, 'GDP')

    # –í–í–ü
    fig.add_trace(
        go.Bar(x=top_countries['Country'], y=top_countries['GDP'] / 1e9,
               name='–í–í–ü (–º–ª—Ä–¥ $)', marker_color='lightblue'),
        row=1, col=1
    )

    # –ë–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞
    fig.add_trace(
        go.Scatter(x=filtered_df['Country'], y=filtered_df['Unemployment rate'],  # –ò–∑–º–µ–Ω–µ–Ω–æ
                   mode='markers+lines', name='–ë–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞ (%)', marker_color='red'),
        row=1, col=2
    )

    # –ù–∞–ª–æ–≥–æ–≤—ã–µ –¥–æ—Ö–æ–¥—ã
    fig.add_trace(
        go.Bar(x=filtered_df['Country'], y=filtered_df['Tax revenue (%)'],  # –ò–∑–º–µ–Ω–µ–Ω–æ
               name='–ù–∞–ª–æ–≥–æ–≤—ã–µ –¥–æ—Ö–æ–¥—ã (%)', marker_color='green'),
        row=2, col=1
    )
    # create_population_pyramid (—ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —Ç—É—Ç –Ω–µ –Ω—É–∂–Ω–∞, –æ–Ω–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)

    # CO2 —ç–º–∏—Å—Å–∏–∏
    fig.add_trace(
        go.Scatter(x=filtered_df['Population'] / 1e6, y=filtered_df['Co2-Emissions'] / 1e6,
                   mode='markers', name='CO2 (–º–ª–Ω —Ç–æ–Ω–Ω)', marker_color='orange',
                   text=filtered_df['Country']),
        row=2, col=2
    )

    fig.update_layout(
        height=800,
        title_text="üìä –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
        title_font=dict(size=20, color='#2c3e50'),
        showlegend=False
    )

    return fig


def create_demographic_analysis(df, selected_countries):
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        filtered_df = df[df['Country'].isin(selected_countries)] if selected_countries else df

        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN –≤ –∫–ª—é—á–µ–≤—ã—Ö –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è—Ö
        demo_cols = ['Birth Rate', 'Life expectancy', 'Fertility Rate', 'Infant Mortality']
        available_cols = [col for col in demo_cols if col in filtered_df.columns]

        if not available_cols:
            return None

        clean_df = filtered_df.dropna(subset=available_cols, how='all')

        if clean_df.empty:
            return None

        # –°–æ–∑–¥–∞–µ–º subplot —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
        from plotly.subplots import make_subplots

        fig = make_subplots(
            rows=2, cols=2,
            subplot_titles=('–†–æ–∂–¥–∞–µ–º–æ—Å—Ç—å vs –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏',
                            '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ñ–µ—Ä—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ vs –î–µ—Ç—Å–∫–∞—è —Å–º–µ—Ä—Ç–Ω–æ—Å—Ç—å',
                            '–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è', '–ì–æ—Ä–æ–¥—Å–∫–æ–µ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ'),
            specs=[[{"secondary_y": False}, {"secondary_y": False}],
                   [{"secondary_y": False}, {"secondary_y": False}]]
        )

        # –ì—Ä–∞—Ñ–∏–∫ 1: Birth Rate vs Life Expectancy
        if 'Birth Rate' in clean_df.columns and 'Life expectancy' in clean_df.columns:
            fig.add_trace(
                go.Scatter(
                    x=clean_df['Birth Rate'],
                    y=clean_df['Life expectancy'],
                    mode='markers',
                    text=clean_df['Country'],
                    name='–°—Ç—Ä–∞–Ω—ã',
                    marker=dict(size=8)
                ),
                row=1, col=1
            )

        # –ì—Ä–∞—Ñ–∏–∫ 2: Fertility Rate vs Infant Mortality
        if 'Fertility Rate' in clean_df.columns and 'Infant Mortality' in clean_df.columns:
            fig.add_trace(
                go.Scatter(
                    x=clean_df['Fertility Rate'],
                    y=clean_df['Infant Mortality'],
                    mode='markers',
                    text=clean_df['Country'],
                    name='–°—Ç—Ä–∞–Ω—ã',
                    marker=dict(size=8)
                ),
                row=1, col=2
            )

        # –ì—Ä–∞—Ñ–∏–∫ 3: Population Density
        if 'Density (P/Km2)' in clean_df.columns:
            top_density = clean_df.nlargest(10, 'Density (P/Km2)')
            fig.add_trace(
                go.Bar(
                    x=top_density['Country'],
                    y=top_density['Density (P/Km2)'],
                    name='–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è'
                ),
                row=2, col=1
            )

        # –ì—Ä–∞—Ñ–∏–∫ 4: Urban Population
        if 'Urban_population' in clean_df.columns:
            fig.add_trace(
                go.Histogram(
                    x=clean_df['Urban_population'],
                    nbinsx=20,
                    name='–ì–æ—Ä–æ–¥—Å–∫–æ–µ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ (%)'
                ),
                row=2, col=2
            )

        fig.update_layout(
            title_text="üìä –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
            title_font=dict(size=20, color='#2c3e50'),
            height=800,
            showlegend=False
        )

        return fig
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        return None


def create_ecological_analysis(df, selected_countries):
    """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        filtered_df = df[df['Country'].isin(selected_countries)] if selected_countries else df

        # –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        eco_cols = ['Co2-Emissions', 'Forested Area (%)', 'Agricultural Land (%)']
        available_cols = [col for col in eco_cols if col in filtered_df.columns]

        if not available_cols:
            return None

        clean_df = filtered_df.dropna(subset=available_cols, how='all')

        if clean_df.empty:
            return None

        from plotly.subplots import make_subplots

        fig = make_subplots(
            rows=2, cols=2,
            subplot_titles=('CO2 –≤—ã–±—Ä–æ—Å—ã vs –í–í–ü',
                            '–õ–µ—Å–Ω—ã–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ (%)',
                            '–°–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–µ–º–ª–∏ (%)',
                            '–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å'),
            specs=[[{"secondary_y": False}, {"secondary_y": False}],
                   [{"secondary_y": False}, {"secondary_y": False}]]
        )

        # –ì—Ä–∞—Ñ–∏–∫ 1: CO2 vs GDP
        if 'Co2-Emissions' in clean_df.columns and 'GDP' in clean_df.columns:
            fig.add_trace(
                go.Scatter(
                    x=clean_df['GDP'],
                    y=clean_df['Co2-Emissions'],
                    mode='markers',
                    text=clean_df['Country'],
                    name='CO2 vs –í–í–ü',
                    marker=dict(size=8, color='red', opacity=0.6)
                ),
                row=1, col=1
            )

        # –ì—Ä–∞—Ñ–∏–∫ 2: Forest Area
        if 'Forested Area (%)' in clean_df.columns:
            top_forest = clean_df.nlargest(15, 'Forested Area (%)')
            fig.add_trace(
                go.Bar(
                    x=top_forest['Country'],
                    y=top_forest['Forested Area (%)'],
                    name='–õ–µ—Å–Ω—ã–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏',
                    marker_color='green'
                ),
                row=1, col=2
            )

        # –ì—Ä–∞—Ñ–∏–∫ 3: Agricultural Land
        if 'Agricultural Land (%)' in clean_df.columns:
            top_agri = clean_df.nlargest(15, 'Agricultural Land (%)')
            fig.add_trace(
                go.Bar(
                    x=top_agri['Country'],
                    y=top_agri['Agricultural Land (%)'],
                    name='–°–µ–ª—å—Ö–æ–∑ –∑–µ–º–ª–∏',
                    marker_color='orange'
                ),
                row=2, col=1
            )

        # –ì—Ä–∞—Ñ–∏–∫ 4: Eco Balance (Forest - Agricultural)
        if 'Forested Area (%)' in clean_df.columns and 'Agricultural Land (%)' in clean_df.columns:
            clean_df['Eco_Balance'] = clean_df['Forested Area (%)'] - clean_df['Agricultural Land (%)']
            fig.add_trace(
                go.Scatter(
                    x=clean_df['Forested Area (%)'],
                    y=clean_df['Agricultural Land (%)'],
                    mode='markers',
                    text=clean_df['Country'],
                    name='–≠–∫–æ–±–∞–ª–∞–Ω—Å',
                    marker=dict(
                        size=8,
                        color=clean_df['Eco_Balance'],
                        colorscale='RdYlGn',
                        showscale=True
                    )
                ),
                row=2, col=2
            )

        fig.update_layout(
            title_text="üåç –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
            title_font=dict(size=20, color='#2c3e50'),
            height=800,
            showlegend=False
        )

        # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞—Ö —Å –±–∞—Ä–∞–º–∏
        fig.update_xaxes(tickangle=45, row=1, col=2)
        fig.update_xaxes(tickangle=45, row=2, col=1)

        return fig
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        return None


def create_demographic_metrics(df, selected_countries):
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫"""
    try:
        filtered_df = df[df['Country'].isin(selected_countries)] if selected_countries else df

        col1, col2, col3, col4 = st.columns(4)

        with col1:
            avg_birth = filtered_df['Birth Rate'].dropna().mean() if 'Birth Rate' in filtered_df.columns else 0
            st.markdown("""
            <div class="metric-card">
                <h3>üë∂ –°—Ä–µ–¥–Ω—è—è —Ä–æ–∂–¥–∞–µ–º–æ—Å—Ç—å</h3>
                <h2>{:.1f}</h2>
                <p>–Ω–∞ 1000 —á–µ–ª.</p>
            </div>
            """.format(avg_birth), unsafe_allow_html=True)

        with col2:
            avg_fertility = filtered_df[
                'Fertility Rate'].dropna().mean() if 'Fertility Rate' in filtered_df.columns else 0
            st.markdown("""
            <div class="metric-card">
                <h3>üë™ –ö–æ—ç—Ñ. —Ñ–µ—Ä—Ç–∏–ª—å–Ω–æ—Å—Ç–∏</h3>
                <h2>{:.2f}</h2>
                <p>–¥–µ—Ç–µ–π –Ω–∞ –∂–µ–Ω—â–∏–Ω—É</p>
            </div>
            """.format(avg_fertility), unsafe_allow_html=True)

        with col3:
            avg_infant = filtered_df[
                'Infant Mortality'].dropna().mean() if 'Infant Mortality' in filtered_df.columns else 0
            st.markdown("""
            <div class="metric-card">
                <h3>üëº –î–µ—Ç—Å–∫–∞—è —Å–º–µ—Ä—Ç–Ω–æ—Å—Ç—å</h3>
                <h2>{:.1f}</h2>
                <p>–Ω–∞ 1000 —Ä–æ–∂–¥–µ–Ω–∏–π</p>
            </div>
            """.format(avg_infant), unsafe_allow_html=True)

        with col4:
            avg_urban = (
                filtered_df['Urban_population'].dropna().mean()
                if 'Urban_population' in filtered_df.columns else 0
            )
            st.markdown("""
            <div class="metric-card">
                <h3>üèôÔ∏è –ì–æ—Ä–æ–¥—Å–∫–æ–µ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ</h3>
                <h2>{:,.0f}</h2>
                <p>—á–µ–ª–æ–≤–µ–∫ –≤ —Å—Ä–µ–¥–Ω–µ–º</p>
            </div>
            """.format(avg_urban).replace(",", " "), unsafe_allow_html=True)


    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫: {str(e)}")


def create_ecological_metrics(df, selected_countries):
    """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫"""
    try:
        filtered_df = df[df['Country'].isin(selected_countries)] if selected_countries else df

        col1, col2, col3, col4 = st.columns(4)

        with col1:
            avg_co2 = filtered_df['Co2-Emissions'].dropna().mean() if 'Co2-Emissions' in filtered_df.columns else 0

            def format_co2_metric(value):
                if value >= 1e6:
                    return f"{value / 1e6:.2f}M"
                elif value >= 1e3:
                    return f"{value / 1e3:.2f}K"
                else:
                    return f"{value:.2f}"

            formatted_avg_co2 = format_co2_metric(avg_co2)

            st.markdown(f"""
            <div class="metric-card">
                <h3>üè≠ –°—Ä–µ–¥–Ω–∏–µ –≤—ã–±—Ä–æ—Å—ã CO‚ÇÇ</h3>
                <h2>{formatted_avg_co2}</h2>
                <p>—Ç–æ–Ω–Ω</p>
            </div>
            """, unsafe_allow_html=True)

        with col2:
            avg_forest = filtered_df[
                'Forested Area (%)'].dropna().mean() if 'Forested Area (%)' in filtered_df.columns else 0
            st.markdown("""
            <div class="metric-card">
                <h3>üå≤ –õ–µ—Å–Ω—ã–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏</h3>
                <h2>{:.1f}%</h2>
                <p>–æ—Ç –æ–±—â–µ–π –ø–ª–æ—â–∞–¥–∏</p>
            </div>
            """.format(avg_forest), unsafe_allow_html=True)

        with col3:
            avg_agri = filtered_df[
                'Agricultural Land (%)'].dropna().mean() if 'Agricultural Land (%)' in filtered_df.columns else 0
            st.markdown("""
            <div class="metric-card">
                <h3>üöú –°–µ–ª—å—Ö–æ–∑ –∑–µ–º–ª–∏</h3>
                <h2>{:.1f}%</h2>
                <p>–æ—Ç –æ–±—â–µ–π –ø–ª–æ—â–∞–¥–∏</p>
            </div>
            """.format(avg_agri), unsafe_allow_html=True)

        with col4:
            if 'Forested Area (%)' in filtered_df.columns and 'Agricultural Land (%)' in filtered_df.columns:
                eco_balance = (filtered_df['Forested Area (%)'].dropna().mean() -
                               filtered_df['Agricultural Land (%)'].dropna().mean())
            else:
                eco_balance = 0
            st.markdown("""
            <div class="metric-card">
                <h3>‚öñÔ∏è –≠–∫–æ–±–∞–ª–∞–Ω—Å</h3>
                <h2>{:.1f}</h2>
                <p>–ª–µ—Å - —Å–µ–ª—å—Ö–æ–∑</p>
            </div>
            """.format(eco_balance), unsafe_allow_html=True)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫: {str(e)}")


def main():
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.markdown("""
    <div style='text-align: center; padding: 2rem 0;'>
        <h1 style='color: #2c3e50; font-size: 3rem; margin-bottom: 0;'>üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –î–∞—à–±–æ—Ä–¥</h1>
        <h3 style='color: #7f8c8d; margin-top: 0;'>–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –º–∏—Ä–∞ 2023</h3>
    </div>
    """, unsafe_allow_html=True)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df_original = load_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    df = df_original.copy()  # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    st.sidebar.markdown("## üéõÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

    # –§–∏–ª—å—Ç—Ä—ã
    st.sidebar.markdown("### üîç –§–∏–ª—å—Ç—Ä—ã")

    # –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω (–≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    all_countries = df_original['Country'].unique().tolist()
    selected_countries = st.sidebar.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—ã:",
        options=all_countries,
        default=[],
        help="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω"
    )

    # –î–∏–∞–ø–∞–∑–æ–Ω –Ω–∞—Å–µ–ª–µ–Ω–∏—è
    apply_population_filter = st.sidebar.checkbox(
        "–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é",
        value=False,
        help="–í–∫–ª—é—á–∏—Ç–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—è"
    )

    if apply_population_filter and 'Population' in df.columns and df['Population'].notna().any():
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN –∏ Infinity, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Å min/max
        valid_population = df_original['Population'].dropna()
        if not valid_population.empty:
            pop_min_val = int(valid_population.min() / 1e6) if valid_population.min() > 0 else 0
            pop_max_val = int(valid_population.max() / 1e6) if valid_population.max() > 0 else 100

            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ min < max
            if pop_min_val >= pop_max_val:
                pop_max_val = pop_min_val + 100

            pop_range = st.sidebar.slider(
                "–î–∏–∞–ø–∞–∑–æ–Ω –Ω–∞—Å–µ–ª–µ–Ω–∏—è (–º–ª–Ω):",
                min_value=pop_min_val,
                max_value=pop_max_val,
                value=(pop_min_val, pop_max_val),
                help="–§–∏–ª—å—Ç—Ä –ø–æ —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—è"
            )

            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
            if not selected_countries:
                df = df[(df['Population'] >= pop_range[0] * 1e6) & (df['Population'] <= pop_range[1] * 1e6)]
            else:
                # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã, —Ñ–∏–ª—å—Ç—Ä –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫ –Ω–∏–º
                selected_df = df_original[df_original['Country'].isin(selected_countries)]
                other_df = df_original[~df_original['Country'].isin(selected_countries)]
                other_df = other_df[
                    (other_df['Population'] >= pop_range[0] * 1e6) & (other_df['Population'] <= pop_range[1] * 1e6)]
                df = pd.concat([selected_df, other_df])

                st.sidebar.info(f"‚ÑπÔ∏è –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã ({len(selected_countries)}) –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω—ã –≤ –∞–Ω–∞–ª–∏–∑")

    # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    if selected_countries:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö
        available_countries = [country for country in selected_countries if country in df['Country'].values]
        missing_countries = [country for country in selected_countries if country not in df['Country'].values]

        if missing_countries:
            st.sidebar.warning(f"‚ö†Ô∏è –°—Ç—Ä–∞–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö: {', '.join(missing_countries)}")

        if available_countries:
            st.sidebar.success(
                f"‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ {len(available_countries)} —Å—Ç—Ä–∞–Ω–∞–º: {', '.join(available_countries[:3])}{'...' if len(available_countries) > 3 else ''}")
        else:
            st.sidebar.error("‚ùå –ù–∏ –æ–¥–Ω–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –¥–∞–Ω–Ω—ã—Ö!")
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä, –µ—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            selected_countries = []

    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∞–Ω–∞–ª–∏–∑–∞
    analysis_mode = st.sidebar.selectbox(
        "üéØ –†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞:",
        ["–û–±–∑–æ—Ä", "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π", "–î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π", "–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π", "–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π"]
    )

    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
    if st.sidebar.checkbox("üîß –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", value=False):
        st.sidebar.write(f"–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω –≤ –¥–∞–Ω–Ω—ã—Ö: {len(df)}")
        st.sidebar.write(f"–í—ã–±—Ä–∞–Ω–æ —Å—Ç—Ä–∞–Ω: {len(selected_countries) if selected_countries else 0}")
        if selected_countries:
            st.sidebar.write("–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã:", selected_countries[:5])

    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if analysis_mode == "–û–±–∑–æ—Ä":
        st.markdown("## üìä –û–±—â–∏–π –æ–±–∑–æ—Ä")
        # –ö–∞—Ä—Ç–æ—á–∫–∏ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        create_metric_cards(df, selected_countries)
        # –î–≤–∞ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        col1, col2 = st.columns(2)
        with col1:
            fig_scatter = create_gdp_vs_life_expectancy(df, selected_countries)
            if fig_scatter:
                st.plotly_chart(fig_scatter, use_container_width=True)
            else:
                st.info("üìä –ì—Ä–∞—Ñ–∏–∫ –í–í–ü vs –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        with col2:
            fig_pop = create_population_pyramid(df, selected_countries)
            if fig_pop:
                st.plotly_chart(fig_pop, use_container_width=True)
            else:
                st.info("üìä –ì—Ä–∞—Ñ–∏–∫ –Ω–∞—Å–µ–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
        fig_corr = create_correlation_heatmap(df, selected_countries)
        if fig_corr:
            st.plotly_chart(fig_corr, use_container_width=True)
        else:
            st.info("üìä –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (–≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º)
        st.markdown("## üìã –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö")

        # –§–∏–ª—å—Ç—Ä –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        display_df = df[df['Country'].isin(selected_countries)] if selected_countries else df

        # –ü–æ–∏—Å–∫ –ø–æ —Ç–∞–±–ª–∏—Ü–µ
        search_term = st.text_input("üîé –ü–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º:", "")
        if search_term:
            display_df = display_df[display_df['Country'].str.contains(search_term, case=False, na=False)]

        if not display_df.empty:
            # –§–∏–ª—å—Ç—Ä –∫–æ–ª–æ–Ω–æ–∫
            st.markdown("### üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫")

            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–º
            col_filter1, col_filter2, col_filter3 = st.columns([2, 1, 1])

            with col_filter1:
                st.markdown("**–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:**")

            with col_filter2:
                if st.button("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", key="select_all_cols"):
                    st.session_state.selected_columns = display_df.columns.tolist()

            with col_filter3:
                if st.button("‚ùå –°–Ω—è—Ç—å –≤—Å–µ", key="deselect_all_cols"):
                    st.session_state.selected_columns = ['Country']  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ Country

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if 'selected_columns' not in st.session_state:
                st.session_state.selected_columns = display_df.columns.tolist()

            if 'Country' not in st.session_state.selected_columns:
                st.session_state.selected_columns.insert(0, 'Country')

            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            column_categories = {
                "üèõÔ∏è –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": ['Country', 'Abbreviation', 'Capital/Major City', 'Largest City',
                                           'Official Language'],
                "üë• –î–µ–º–æ–≥—Ä–∞—Ñ–∏—è": ['Population', 'Density (P/Km2)', 'Birth Rate', 'Fertility Rate', 'Life expectancy',
                                 'Infant Mortality', 'Maternal Mortality Ratio', 'Urban_population'],
                "üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞": ['GDP', 'CPI', 'CPI Change (%)', 'Currency_Code', 'Minimum Wage',
                                'Tax revenue (%)', 'Total tax rate', 'Unemployment rate',
                                'Population: Labor force participation (%)'],
                "üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": ['Gross Primary Education Enrollment (%)',
                                  'Gross Tertiary Education Enrollment (%)'],
                "üè• –ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ": ['Physicians per thousand', 'Out of pocket health expenditure'],
                "üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è –∏ —ç–∫–æ–ª–æ–≥–∏—è": ['Land Area (Km2)', 'Agricultural Land (%)', 'Forested Area (%)',
                                           'Co2-Emissions', 'Latitude', 'Longitude'],
                "üõ°Ô∏è –ü—Ä–æ—á–µ–µ": ['Armed Forces Size', 'Calling Code', 'Gasoline_Price']
            }

            # –°–æ–∑–¥–∞–µ–º expandable —Å–µ–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            available_columns = display_df.columns.tolist()

            for category, cols in column_categories.items():
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
                existing_cols = [col for col in cols if col in available_columns and col != 'Country']

                if existing_cols:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –Ω–µ–π –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∏
                    with st.expander(f"{category} ({len(existing_cols)} –∫–æ–ª–æ–Ω–æ–∫)", expanded=False):
                        # –°–æ–∑–¥–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
                        checkbox_cols = st.columns(min(3, len(existing_cols)))

                        for idx, col in enumerate(existing_cols):
                            with checkbox_cols[idx % len(checkbox_cols)]:
                                current_state = col in st.session_state.selected_columns
                                new_state = st.checkbox(
                                    col.replace('_', ' ').title(),
                                    value=current_state,
                                    key=f"col_filter_{col}"
                                )

                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                                if new_state and col not in st.session_state.selected_columns:
                                    st.session_state.selected_columns.append(col)
                                elif not new_state and col in st.session_state.selected_columns:
                                    st.session_state.selected_columns.remove(col)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
            selected_count = len(st.session_state.selected_columns)
            total_count = len(available_columns)

            if selected_count > 0:
                st.markdown(f"""
                <div class="highlight">
                    üìä <strong>–í—ã–±—Ä–∞–Ω–æ –∫–æ–ª–æ–Ω–æ–∫:</strong> {selected_count} –∏–∑ {total_count}
                </div>
                """, unsafe_allow_html=True)

                # –§–∏–ª—å—Ç—Ä—É–µ–º DataFrame –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–æ–ª–æ–Ω–∫–∞–º
                st.session_state.selected_columns = [
                    col for col in st.session_state.selected_columns if col in display_df.columns
                ]
                display_df_filtered = display_df[st.session_state.selected_columns]

                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
                st.markdown("### üìã –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö:")

                # –û–ø—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_options_col1, display_options_col2 = st.columns(2)

                with display_options_col2:
                    table_height = 400

                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                st.dataframe(
                    display_df_filtered,
                    use_container_width=True,
                    height=table_height,
                )

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                st.markdown(f"""
                <div style='color: #666; font-size: 0.9em; margin-top: 1rem;'>
                    üìà –û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: <strong>{len(display_df_filtered)}</strong> | 
                    üìä –ö–æ–ª–æ–Ω–æ–∫: <strong>{len(st.session_state.selected_columns)}</strong>
                </div>
                """, unsafe_allow_html=True)

                st.markdown("<div style='margin-top: 20px;'></div>", unsafe_allow_html=True)

                def to_excel(df):
                    output = io.BytesIO()
                    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                        df.to_excel(writer, index=False, sheet_name='Data')
                    processed_data = output.getvalue()
                    return processed_data

                excel_data = to_excel(display_df_filtered)

                st.download_button(
                    label="## üì• –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤ Excel",
                    data=excel_data,
                    file_name="filtered_data.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )

            else:
                st.warning("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã")

        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")

    elif analysis_mode == "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π":
        st.markdown("## üí∞ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
        fig_econ = create_economic_analysis(df, selected_countries)
        if fig_econ:
            st.plotly_chart(fig_econ, use_container_width=True)
        else:
            st.info("üìä –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        # –¢–æ–ø —Å—Ç—Ä–∞–Ω –ø–æ –í–í–ü
        st.markdown("### üèÜ –¢–æ–ø-10 —Å—Ç—Ä–∞–Ω –ø–æ –í–í–ü")
        filtered_df = df[df['Country'].isin(selected_countries)] if selected_countries else df
        if safe_column_check(filtered_df, 'Unemployment rate'):
            top_gdp = filtered_df.nlargest(10, 'GDP')[['Country', 'GDP', 'Population', 'Unemployment rate']]
            st.dataframe(top_gdp, use_container_width=True)
        else:
            st.info("–î–∞–Ω–Ω—ã–µ –æ–± —É—Ä–æ–≤–Ω–µ –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤—ã–≤–æ–¥–∞.")

    elif analysis_mode == "–î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π":
        st.markdown("## üë• –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")

        # –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        create_demographic_metrics(df, selected_countries)

        # –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏
        fig_demo = create_demographic_analysis(df, selected_countries)
        if fig_demo:
            st.plotly_chart(fig_demo, use_container_width=True)
        else:
            st.info("üìä –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        # –¢–∞–±–ª–∏—Ü–∞ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        st.markdown("### üìã –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
        filtered_df = df[df['Country'].isin(selected_countries)] if selected_countries else df
        demo_columns = ['Country', 'Population', 'Density (P/Km2)', 'Birth Rate',
                        'Life expectancy', 'Fertility Rate', 'Infant Mortality', 'Urban_population']
        available_demo_cols = [col for col in demo_columns if col in filtered_df.columns]

        if available_demo_cols:
            demo_table = filtered_df[available_demo_cols].dropna(how='all')
            if not demo_table.empty:
                st.dataframe(demo_table.sort_values('Population', ascending=False), use_container_width=True)
            else:
                st.warning("–ù–µ—Ç –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        else:
            st.warning("–î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    elif analysis_mode == "–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π":
        st.markdown("## üåç –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")

        # –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        create_ecological_metrics(df, selected_countries)

        # –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏
        fig_eco = create_ecological_analysis(df, selected_countries)
        if fig_eco:
            st.plotly_chart(fig_eco, use_container_width=True)
        else:
            st.info("üìä –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        # –¢–∞–±–ª–∏—Ü–∞ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        st.markdown("### üìã –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
        filtered_df = df[df['Country'].isin(selected_countries)] if selected_countries else df
        eco_columns = ['Country', 'Co2-Emissions', 'Forested Area (%)', 'Agricultural Land (%)',
                       'Land Area (Km2)', 'Population', 'GDP']
        available_eco_cols = [col for col in eco_columns if col in filtered_df.columns]

        if available_eco_cols:
            eco_table = filtered_df[available_eco_cols].dropna(how='all')
            if not eco_table.empty:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                if 'Co2-Emissions' in eco_table.columns and 'Population' in eco_table.columns:
                    eco_table['CO2 –Ω–∞ –¥—É—à—É –Ω–∞—Å–µ–ª–µ–Ω–∏—è'] = eco_table['Co2-Emissions'] / eco_table['Population']
                if 'Co2-Emissions' in eco_table.columns and 'GDP' in eco_table.columns:
                    eco_table['CO2/GDP –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å'] = eco_table['Co2-Emissions'] / eco_table['GDP']

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–±—Ä–æ—Å—ã CO2
                def format_co2(value):
                    if value >= 1e6:
                        return f"{value / 1e6:.2f}M"
                    elif value >= 1e3:
                        return f"{value / 1e3:.2f}K"
                    else:
                        return f"{value:.2f}"

                eco_table['–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ CO2'] = eco_table['Co2-Emissions'].apply(format_co2)

                # –£–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
                display_cols = ['Country', '–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ CO2', 'Forested Area (%)',
                                'Agricultural Land (%)', 'Land Area (Km2)', 'Population',
                                'GDP', 'CO2 –Ω–∞ –¥—É—à—É –Ω–∞—Å–µ–ª–µ–Ω–∏—è', 'CO2/GDP –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å']
                display_cols = [col for col in display_cols if col in eco_table.columns]

                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏—Å—Ö–æ–¥–Ω—ã–º —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º –≤—ã–±—Ä–æ—Å–æ–≤
                eco_table = eco_table.sort_values('Co2-Emissions', ascending=False)

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                st.dataframe(eco_table[display_cols], use_container_width=True)

            else:
                st.warning("–ù–µ—Ç —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

        else:
            st.warning("–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    elif analysis_mode == "–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π":
        st.markdown("## ‚öñÔ∏è –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        if len(selected_countries) >= 2:
            fig_radar = create_multi_indicator_radar(df, selected_countries)
            if fig_radar:
                st.plotly_chart(fig_radar, use_container_width=True)
            else:
                st.info("üìä –†–∞–¥–∞—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã.")
        else:
            st.info("–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å—Ç—Ä–∞–Ω—ã –¥–ª—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if selected_countries:
            st.markdown("### üìã –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω")
            comparison_df = df[df['Country'].isin(selected_countries)]
            if not comparison_df.empty:
                st.dataframe(comparison_df, use_container_width=True)
            else:
                st.warning("–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #7f8c8d; padding: 2rem 0;'>
        <p>üìä –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–∞—à–±–æ—Ä–¥ —Å—Ç—Ä–∞–Ω –º–∏—Ä–∞ ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Streamlit –∏ Plotly</p>
        <p>üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤</p>
    </div>
    """, unsafe_allow_html=True)


if __name__ == "__main__":
    main()
